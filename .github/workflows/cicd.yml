name: build image, deploy new image

on:
  push:
    branches:
      - ganga

jobs:
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set Image Tag
        id: set_image_tag
        run: echo "TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./blogs
          push: true
          tags: saviganga/blogs:${{ env.TAG }}

  ansible:
    name: Update ECS Task Definition
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/ganga'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Ansible and AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install ansible boto3
          pip3 install --upgrade awscli

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get Latest Docker Image Tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(curl -s https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_HUB_REPO }}/tags/?page_size=1 | jq -r '.results[0].name')
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Update ECS Task Definition with Ansible
        run: |
          ansible-playbook -i ./devops/ansible/inventory, -c local ./devops/ansible/playbooks/update_ecs_task.yaml --extra-vars "new_image_uri=${{ secrets.DOCKER_HUB_REPO }}:${{ env.LATEST_TAG }} execution_role_arn=${{ secrets.EXECUTION_ROLE_ARN }} task_definition_family=${{ secrets.TASK_DEFINITION_FAMILY }} docker_hub_repo=${{ secrets.DOCKER_HUB_REPO }} container_name=${{ secrets.CONTAINER_NAME }} cluster=${{ secrets.CLUSTER }} cluster_service=${{ secrets.CLUSTER_SERVICE }} region=${{ secrets.REGION }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
